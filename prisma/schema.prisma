generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  expensesPaid    Expense[] @relation("Payer")
  expenseSplits   ExpenseSplit[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  settlementsFrom Settlement[] @relation("SettlementFrom")
  settlementsTo   Settlement[] @relation("SettlementTo")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Expense {
  id          String    @id @default(cuid())
  amount      Float
  description String
  createdAt   DateTime  @default(now())
  payerId     String
  payer       User      @relation("Payer", fields: [payerId], references: [id])
  
  splits      ExpenseSplit[]
  
  settled     Boolean   @default(false)
  settledAt   DateTime?
}

model ExpenseSplit {
  id        String   @id @default(cuid())
  expenseId String
  expense   Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  amountOwed Float

  @@unique([expenseId, userId])
}

model Settlement {
  id          String   @id @default(cuid())
  fromUserId  String
  fromUser    User     @relation("SettlementFrom", fields: [fromUserId], references: [id])
  toUserId    String
  toUser      User     @relation("SettlementTo", fields: [toUserId], references: [id])
  amount      Float
  createdAt   DateTime @default(now())
  completed   Boolean  @default(false)
  completedAt DateTime?
}